dr_vorbis_h := <../dr_vorbis.h>;
fs_h        :: <../../fs/fs.h>;
fs_c        :: <../../fs/fs.c>;

replace_namespace :: function(src:string) string
{
    return @(src)
        ["fs_"] <= "dr_vorbis_"
        ["FS_"] <= "DR_VORBIS_";
}

// Allocation Callbacks.
dr_vorbis_h("/\* BEG dr_vorbis_allocation_callbacks.h \*/\R" : "\R/\* END dr_vorbis_allocation_callbacks.h \*/") =
    replace_namespace(@(fs_h("/\* BEG fs_allocation_callbacks.h \*/\R" : "\R/\* END fs_allocation_callbacks.h \*/")));

dr_vorbis_h("/\* BEG dr_vorbis_allocation_callbacks.c \*/\R" : "\R/\* END dr_vorbis_allocation_callbacks.c \*/") =
    replace_namespace(@(fs_c("/\* BEG fs_allocation_callbacks.c \*/\R" : "\R/\* END fs_allocation_callbacks.c \*/")));


// Stream
stream_h := replace_namespace(@(fs_h("/\* BEG fs_stream.h \*/\R":"\R/\* END fs_stream.h \*/")));
stream_c := replace_namespace(@(fs_c("/\* BEG fs_stream.c \*/\R":"\R/\* END fs_stream.c \*/")));

// Clear out parts of the stream we don't use.
stream_h["(?m)^\s*/\* BEG dr_vorbis_stream_vtable_duplicate \*/\R" : "/\* END dr_vorbis_stream_vtable_duplicate \*/\R"] <= "";
stream_h["/\* BEG dr_vorbis_stream_writef.h \*/\R"                 : "/\* END dr_vorbis_stream_writef.h \*/\R"        ] <= "";
stream_h["/\* BEG dr_vorbis_stream_duplicate.h \*/\R"              : "/\* END dr_vorbis_stream_duplicate.h \*/\R"     ] <= "";
stream_h["/\* BEG dr_vorbis_stream_helpers.h \*/\R"                : "/\* END dr_vorbis_stream_helpers.h \*/$"        ] <= "";

// Some alignment stuff.
stream_h
    ["dr_vorbis_result \(\* read                "] <= "dr_vorbis_result (* read "
    ["dr_vorbis_result \(\* write               "] <= "dr_vorbis_result (* write"
    ["dr_vorbis_result \(\* seek                "] <= "dr_vorbis_result (* seek "
    ["dr_vorbis_result \(\* tell                "] <= "dr_vorbis_result (* tell ";

// A hack to clean up some stray new-line characters.
stream_h["\r?\n\r?\n\r?\n\r?\n\z"] <= "";

// Apply the changes.
dr_vorbis_h("/\* BEG dr_vorbis_stream.h \*/\R":"\R/\* END dr_vorbis_stream.h \*/") = stream_h;

